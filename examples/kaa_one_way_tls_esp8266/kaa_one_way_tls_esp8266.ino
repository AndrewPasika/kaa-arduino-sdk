#include <ESP8266WiFi.h>
#include <WiFiClientSecure.h>
#include <PubSubClient.h>
#include <ArduinoJson.h>
#include "kaa.h"

#define KAA_SERVER "mqtt.cloud.kaaiot.com"
#define KAA_PORT 8883
#define KAA_TOKEN "**********"
#define KAA_APP_VERSION "**********"

#define RECONNECT_TIME  5000 //ms
#define SEND_TIME       3000 //ms

#define COMMAND_TYPE "OUTPUT_SWITCH"
#define OUTPUT_1_NAME "output_1"

const char* ssid = "******";
const char* password = "********";

char mqtt_host[] = KAA_SERVER;
unsigned int mqtt_port = KAA_PORT;

unsigned long now = 0;
unsigned long last_reconnect = 0;
unsigned long last_msg = 0;

// Use PemCertToByteArrayESP8266.py from this example folder to convert root_ca.pem to byte array
// root_ca.pem
const unsigned char caCert[] PROGMEM = {

0x30, 0x82, 0x06, 0x77, 0x30, 0x82, 0x04, 0x5f, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x10, 0x49, 0x97, 0x12, 0x14, 0x45, 0xae, 0x6b, 0x4b, 0x6e, 0xf0, 0xf3, 0x8a, 0xd4, 0x50, 0x0b, 0x3b, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0c, 0x05, 0x00, 0x30, 0x4b, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x41, 0x54, 0x31, 0x10, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x07, 0x5a, 0x65, 0x72, 0x6f, 0x53, 0x53, 0x4c, 0x31, 0x2a, 0x30, 0x28, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x21, 0x5a, 0x65, 0x72, 0x6f, 0x53, 
0x53, 0x4c, 0x20, 0x52, 0x53, 0x41, 0x20, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x20, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x20, 0x53, 0x69, 0x74, 0x65, 0x20, 0x43, 0x41, 0x30, 0x1e, 0x17, 0x0d, 0x32, 0x30, 0x30, 0x37, 0x32, 0x33, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0x0d, 0x32, 0x30, 0x31, 0x30, 0x32, 0x31, 0x32, 0x33, 0x35, 0x39, 0x35, 0x39, 0x5a, 0x30, 0x20, 0x31, 0x1e, 0x30, 0x1c, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x15, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x61, 0x61, 0x69, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 
0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0x8c, 0x7c, 0xc2, 0x12, 0x76, 0xdb, 0x0b, 0xfd, 0x5a, 0x28, 0xf3, 0xf3, 0x52, 0x8b, 0x66, 0xbc, 0xe8, 0x11, 0xa3, 0x37, 0x4f, 0xde, 0xc9, 0x0c, 0xdb, 0x53, 0xdc, 0x9d, 0xd8, 0xdb, 0xae, 0x58, 0xb5, 0x33, 0x3a, 0x31, 0x3b, 0xe7, 0xa9, 0x08, 0xe1, 0xc3, 0xdd, 0xa8, 0x63, 0xa1, 0x5b, 0x81, 0xfe, 0x33, 0xf7, 0xb7, 0x02, 0x48, 0x70, 0x44, 0xef, 0xb1, 0x0c, 0x7c, 0x3d, 0x09, 0x2e, 
0x6d, 0x67, 0x46, 0x8b, 0x12, 0x32, 0x3e, 0x1d, 0x2d, 0xee, 0x58, 0x7c, 0x46, 0x59, 0xcf, 0xe3, 0x59, 0x27, 0xe9, 0x89, 0xd4, 0x22, 0x79, 0x40, 0xe6, 0x0c, 0x21, 0xb0, 0x3d, 0xf0, 0x29, 0xcb, 0x7a, 0xe6, 0x92, 0x37, 0x76, 0xc3, 0xec, 0x46, 0x40, 0x98, 0x6c, 0x1f, 0x14, 0x49, 0xf2, 0x0a, 0x5b, 0xda, 0xd1, 0xb8, 0x88, 0x3b, 0x50, 0x02, 0x66, 0x57, 0x57, 0x47, 0x09, 0x9f, 0xc2, 0x0c, 0xb5, 0x88, 0xd7, 0x86, 0x12, 0x19, 0xf7, 0x3a, 0x6e, 0x15, 0xbd, 0x90, 0xf0, 0x26, 0x38, 0x0f, 0x83, 0x7f, 0x07, 0x41, 0x33, 0x6b, 0x7e, 0xdf, 0x4d, 0x52, 0x7d, 0x91, 0x0b, 0xc4, 0xf5, 
0x2e, 0x97, 0x0c, 0x45, 0x99, 0x96, 0x89, 0x2e, 0xd3, 0x40, 0x91, 0x2d, 0x21, 0xa2, 0x06, 0x53, 0xa5, 0x71, 0xee, 0x4b, 0x2f, 0x3c, 0x11, 0x84, 0xdd, 0x78, 0xd4, 0xfe, 0xaa, 0xaf, 0x8f, 0x4c, 0xca, 0xc4, 0x3b, 0xd6, 0x98, 0xd2, 0x79, 0x67, 0x79, 0x3a, 0xe7, 0x66, 0x1f, 0x42, 0xda, 0x3a, 0x51, 0xfb, 0x3a, 0x37, 0x8d, 0xa1, 0xc4, 0xd8, 0xab, 0x68, 0xac, 0x74, 0xf7, 0xd6, 0x63, 0xb4, 0x6d, 0x3e, 0x75, 0x9a, 0x78, 0xbd, 0x6e, 0x19, 0x31, 0x3b, 0xf5, 0xc9, 0xed, 0xf8, 0x8e, 0x91, 0xb1, 0xce, 0xd7, 0xd5, 0x0d, 0x14, 0x2f, 0x7e, 0x90, 0x3f, 0x0c, 0x8b, 0xfb, 0xc7, 0x44, 
0x01, 0xfe, 0xd7, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x82, 0x02, 0x80, 0x30, 0x82, 0x02, 0x7c, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xc8, 0xd9, 0x78, 0x68, 0xa2, 0xd9, 0x19, 0x68, 0xd5, 0x3d, 0x72, 0xde, 0x5f, 0x0a, 0x3e, 0xdc, 0xb5, 0x86, 0x86, 0xa6, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0x9c, 0x10, 0xfd, 0xf3, 0x87, 0xed, 0x0d, 0x3b, 0x4c, 0x0b, 0x3e, 0x81, 0xd3, 0x0d, 0x08, 0x27, 0xc6, 0xd7, 0x5f, 0x9c, 0x30, 0x0e, 0x06, 0x03, 0x55, 0x1d, 0x0f, 0x01, 0x01, 0xff, 0x04, 0x04, 0x03, 0x02, 0x05, 
0xa0, 0x30, 0x0c, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x02, 0x30, 0x00, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x25, 0x04, 0x16, 0x30, 0x14, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x01, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x03, 0x02, 0x30, 0x49, 0x06, 0x03, 0x55, 0x1d, 0x20, 0x04, 0x42, 0x30, 0x40, 0x30, 0x34, 0x06, 0x0b, 0x2b, 0x06, 0x01, 0x04, 0x01, 0xb2, 0x31, 0x01, 0x02, 0x02, 0x4e, 0x30, 0x25, 0x30, 0x23, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x02, 0x01, 0x16, 0x17, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 
0x2f, 0x73, 0x65, 0x63, 0x74, 0x69, 0x67, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x50, 0x53, 0x30, 0x08, 0x06, 0x06, 0x67, 0x81, 0x0c, 0x01, 0x02, 0x01, 0x30, 0x81, 0x88, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x01, 0x01, 0x04, 0x7c, 0x30, 0x7a, 0x30, 0x4b, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x02, 0x86, 0x3f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x7a, 0x65, 0x72, 0x6f, 0x73, 0x73, 0x6c, 0x2e, 0x63, 0x72, 0x74, 0x2e, 0x73, 0x65, 0x63, 0x74, 0x69, 0x67, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x5a, 0x65, 0x72, 0x6f, 0x53, 0x53, 0x4c, 
0x52, 0x53, 0x41, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x69, 0x74, 0x65, 0x43, 0x41, 0x2e, 0x63, 0x72, 0x74, 0x30, 0x2b, 0x06, 0x08, 0x2b, 0x06, 0x01, 0x05, 0x05, 0x07, 0x30, 0x01, 0x86, 0x1f, 0x68, 0x74, 0x74, 0x70, 0x3a, 0x2f, 0x2f, 0x7a, 0x65, 0x72, 0x6f, 0x73, 0x73, 0x6c, 0x2e, 0x6f, 0x63, 0x73, 0x70, 0x2e, 0x73, 0x65, 0x63, 0x74, 0x69, 0x67, 0x6f, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x82, 0x01, 0x03, 0x06, 0x0a, 0x2b, 0x06, 0x01, 0x04, 0x01, 0xd6, 0x79, 0x02, 0x04, 0x02, 0x04, 0x81, 0xf4, 0x04, 0x81, 0xf1, 0x00, 0xef, 0x00, 
0x75, 0x00, 0x07, 0xb7, 0x5c, 0x1b, 0xe5, 0x7d, 0x68, 0xff, 0xf1, 0xb0, 0xc6, 0x1d, 0x23, 0x15, 0xc7, 0xba, 0xe6, 0x57, 0x7c, 0x57, 0x94, 0xb7, 0x6a, 0xee, 0xbc, 0x61, 0x3a, 0x1a, 0x69, 0xd3, 0xa2, 0x1c, 0x00, 0x00, 0x01, 0x73, 0x7b, 0x38, 0x0b, 0x58, 0x00, 0x00, 0x04, 0x03, 0x00, 0x46, 0x30, 0x44, 0x02, 0x20, 0x54, 0x7a, 0xed, 0x0a, 0x93, 0xe1, 0x09, 0x92, 0xe2, 0x3e, 0x5a, 0x8f, 0x02, 0xbc, 0x47, 0xd2, 0xbd, 0xdb, 0x57, 0x73, 0x2e, 0x9e, 0x98, 0x75, 0xd3, 0xcd, 0xe8, 0xc7, 0x52, 0x54, 0x36, 0x92, 0x02, 0x20, 0x0a, 0xca, 0x73, 0xe8, 0xae, 0xc0, 0xec, 0x65, 0xdb, 
0x68, 0x2d, 0x43, 0x4e, 0x86, 0x2c, 0x6d, 0xed, 0x60, 0xd7, 0xf9, 0x53, 0xee, 0x64, 0xe0, 0x60, 0x8b, 0xe5, 0x89, 0x88, 0x9e, 0xa8, 0x0a, 0x00, 0x76, 0x00, 0xe7, 0x12, 0xf2, 0xb0, 0x37, 0x7e, 0x1a, 0x62, 0xfb, 0x8e, 0xc9, 0x0c, 0x61, 0x84, 0xf1, 0xea, 0x7b, 0x37, 0xcb, 0x56, 0x1d, 0x11, 0x26, 0x5b, 0xf3, 0xe0, 0xf3, 0x4b, 0xf2, 0x41, 0x54, 0x6e, 0x00, 0x00, 0x01, 0x73, 0x7b, 0x38, 0x0b, 0x80, 0x00, 0x00, 0x04, 0x03, 0x00, 0x47, 0x30, 0x45, 0x02, 0x21, 0x00, 0xec, 0x84, 0x41, 0xe4, 0x06, 0x16, 0x3b, 0x5d, 0x22, 0x7a, 0x75, 0x40, 0xa8, 0x61, 0x21, 0xc0, 0x16, 0xee, 
0xa3, 0x3a, 0x06, 0xe7, 0x6e, 0xdd, 0x86, 0x42, 0x71, 0xef, 0x33, 0x87, 0x4b, 0x34, 0x02, 0x20, 0x15, 0x89, 0x53, 0xc8, 0xb6, 0xa5, 0x23, 0x0e, 0xde, 0xf0, 0x64, 0x8a, 0xef, 0xe1, 0x22, 0x8e, 0x11, 0x6b, 0x9b, 0xb7, 0x77, 0x82, 0x4e, 0xf0, 0x9c, 0x5d, 0x6e, 0xa7, 0xa8, 0xcb, 0x05, 0x71, 0x30, 0x20, 0x06, 0x03, 0x55, 0x1d, 0x11, 0x04, 0x19, 0x30, 0x17, 0x82, 0x15, 0x6d, 0x71, 0x74, 0x74, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x6b, 0x61, 0x61, 0x69, 0x6f, 0x74, 0x2e, 0x63, 0x6f, 0x6d, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x0c, 
0x05, 0x00, 0x03, 0x82, 0x02, 0x01, 0x00, 0x7c, 0xc6, 0x5c, 0xab, 0x94, 0xfc, 0x1d, 0xe2, 0x44, 0xb5, 0x79, 0x42, 0x49, 0xc5, 0x39, 0x5d, 0x0b, 0x16, 0x0c, 0x99, 0x71, 0xe3, 0x85, 0xaf, 0xae, 0x3d, 0xc6, 0xb8, 0xe3, 0xfd, 0x90, 0x1b, 0xa1, 0x1f, 0x19, 0x62, 0x20, 0x9d, 0xda, 0xbf, 0x1d, 0x96, 0x61, 0x31, 0xf1, 0x1f, 0x8a, 0x05, 0x4a, 0x1f, 0x14, 0xed, 0x58, 0x5e, 0xa3, 0xa5, 0x49, 0xd3, 0x07, 0x92, 0xa6, 0xb3, 0xb8, 0x73, 0x0b, 0x3d, 0xa1, 0x9c, 0x5b, 0x07, 0xb5, 0x51, 0x3b, 0x86, 0x3d, 0x0a, 0x42, 0xea, 0x55, 0x8b, 0xc0, 0x39, 0xa8, 0x27, 0x8f, 0xb7, 0x46, 0x83, 
0xf9, 0x16, 0x60, 0x57, 0xab, 0x34, 0xe7, 0x87, 0xb4, 0xb7, 0x17, 0x95, 0xc7, 0x6f, 0x77, 0x38, 0xf3, 0x67, 0x3c, 0x6c, 0x32, 0x1d, 0xdf, 0x92, 0x01, 0xec, 0x11, 0x4b, 0x76, 0x11, 0x5d, 0xce, 0x6b, 0xca, 0x9e, 0xec, 0x7d, 0x17, 0x3c, 0xbf, 0x9a, 0x66, 0x70, 0xec, 0x45, 0xad, 0xca, 0x70, 0x93, 0x75, 0x6b, 0x46, 0x7f, 0x11, 0x5c, 0xc9, 0xc7, 0x3b, 0xef, 0x70, 0x17, 0x74, 0x84, 0xde, 0x4b, 0xb6, 0xc1, 0x92, 0x0b, 0xf0, 0x53, 0x2b, 0xc8, 0x6b, 0x37, 0xba, 0xc7, 0x2a, 0xd3, 0xb2, 0x4e, 0xa8, 0xe6, 0xf1, 0x89, 0x91, 0xaa, 0xde, 0x5b, 0x5d, 0xfc, 0x22, 0x50, 0xbb, 0x99, 
0xe8, 0xcd, 0x90, 0x91, 0xbc, 0xdf, 0x52, 0x5c, 0x58, 0xba, 0xdb, 0x34, 0xdc, 0x37, 0xb7, 0xb2, 0xe9, 0x28, 0xbd, 0xa1, 0x9f, 0x69, 0x01, 0xda, 0x07, 0x07, 0x51, 0xcc, 0x86, 0x34, 0x02, 0x62, 0xe0, 0xfc, 0xf3, 0xd2, 0x48, 0xc8, 0xae, 0x71, 0xf9, 0xe2, 0xf6, 0xe2, 0xb6, 0xab, 0x10, 0x6d, 0x19, 0xe8, 0x0e, 0x31, 0x4b, 0x26, 0xd8, 0x2c, 0xa5, 0x30, 0xda, 0xed, 0x4e, 0x0b, 0x72, 0xa1, 0x99, 0x2a, 0x6c, 0x0a, 0xd1, 0xdf, 0xed, 0xb7, 0x11, 0x2f, 0x4b, 0x35, 0x48, 0xb7, 0xc6, 0x86, 0x55, 0x54, 0xd2, 0x6a, 0x50, 0x8b, 0x0b, 0x26, 0x13, 0x3c, 0xde, 0x08, 0xb6, 0x3e, 0xa7, 
0x3f, 0x5b, 0xf0, 0xe6, 0x95, 0x68, 0xe3, 0x0d, 0x2e, 0xa3, 0xdd, 0x14, 0x68, 0x47, 0xe8, 0xff, 0x4d, 0x7b, 0xac, 0x1b, 0x32, 0x10, 0x57, 0xb4, 0xba, 0xc6, 0xde, 0x84, 0x16, 0x57, 0x91, 0xec, 0x4b, 0x5b, 0x59, 0xa8, 0x2f, 0x58, 0xde, 0x2e, 0x16, 0xf4, 0x66, 0x80, 0xe1, 0x95, 0x07, 0xdd, 0x66, 0x96, 0xdb, 0x98, 0xce, 0x35, 0xa6, 0xb6, 0x70, 0xfe, 0x03, 0xd0, 0x3c, 0x5a, 0xd3, 0xa8, 0x9b, 0x94, 0xd6, 0x15, 0x28, 0x0c, 0x8c, 0x46, 0x0a, 0x19, 0xc9, 0x1b, 0x5b, 0x93, 0x0d, 0x82, 0xf4, 0xb5, 0xfc, 0xea, 0x35, 0xcc, 0x03, 0xd3, 0x00, 0x01, 0x9d, 0x1f, 0x0a, 0x5a, 0x14, 
0x9a, 0x57, 0x53, 0x1b, 0x5f, 0x0b, 0xfc, 0x0d, 0x53, 0x34, 0x16, 0x3a, 0xae, 0x8c, 0x18, 0x84, 0xc7, 0x07, 0x23, 0x52, 0x14, 0x99, 0x59, 0x40, 0xc4, 0xd4, 0xae, 0xa0, 0xcb, 0x8b, 0xe6, 0xe2, 0x41, 0x6d, 0xfa, 0x1f, 0xc0, 0x51, 0x80, 0xee, 0x10, 0x89, 0x84, 0xc3, 0xe0, 0x3d, 0x1b, 0x02, 0xda, 0x7e, 0x4f, 0xb7, 0x6e, 0x3a, 0xbe, 0x5c, 0x18, 0x17, 0xd7, 0xa4, 0x6a, 0x47, 0xf3, 0xc8, 0x5e, 0x35, 0x07, 0xd5, 0xa6, 0x70, 0x0e, 0xa5, 0x1d, 0x25, 0x8a, 0xa0, 0x96, 0xa9, 0x75, 0xc5, 0x17, 0x6f, 0xa0, 0x8d, 0x91, 0x52, 0x84, 0x95, 0x8c, 0xd9, 0x5c, 0x60, 0xf8, 0xe9, 0xfc, 
0x63, 0x3f, 0xb1, 0xd5, 0x78, 0x01, 0x17, 0x11, 0x6d, 0xe5, 0xf0, 0x88, 0xb6, 0x4e, 0xe2, 0xb3, 0xa3, 0x4d, 0x76, 0xbd, 0x0b, 0xaa, 0x0c, 0x3d, 0xc5, 0xf1, 0x4f, 0x73, 0x08, 0x4c, 0x93, 0x2d, 0xe2, 0x66, 0x87, 0x0d, 0xe7, 0x0d, 0x2e, 0x63, 0xe2, 0xcc, 0xdd, 0x55};

const unsigned int caCertLen = 1659;

WiFiClientSecure espClient;
PubSubClient client(espClient);
Kaa kaa(&client, KAA_TOKEN, KAA_APP_VERSION);

#define PRINT_DBG(...) printMsg(__VA_ARGS__)

void printMsg(const char * msg, ...) {
  char buff[256];
  va_list args;
  va_start(args, msg);
  vsnprintf(buff, sizeof(buff) - 2, msg, args);
  buff[sizeof(buff) - 1] = '\0';
  Serial.print(buff);
}

void composeAndSendMetadata() {
  StaticJsonDocument<255> doc_data;
  String ipstring = (
                      String(WiFi.localIP()[0]) + "." +
                      String(WiFi.localIP()[1]) + "." +
                      String(WiFi.localIP()[2]) + "." +
                      String(WiFi.localIP()[3])
                    );

  doc_data["name"] = "ESP8266";
  doc_data["model"] = "Wemos D1 mini";
  doc_data["location"] = "Kyiv";
  doc_data["longitude"] = 50.465647;
  doc_data["latitude"] = 30.515270;
  doc_data["ip"] = ipstring;
  doc_data["mac"] = String(WiFi.macAddress());
  doc_data["serial"] = String(ESP.getChipId());

  kaa.sendMetadata(doc_data.as<String>().c_str());
}

void changeOutputState(int output_number, int output_state) {
  digitalWrite(LED_BUILTIN, output_state);
  sendOutputsState();
}

void sendOutputsState() {
  StaticJsonDocument<255> doc_data;

  doc_data.createNestedObject();
  doc_data[0][OUTPUT_1_NAME] = digitalRead(LED_BUILTIN);
  
  kaa.sendDataRaw(doc_data.as<String>().c_str());
}

int commandCallback(char* command_type, char* payload, unsigned int len) {
  if (!strcmp(command_type, COMMAND_TYPE)) {
    DynamicJsonDocument doc(1023);
    //StaticJsonDocument<255> doc;
    deserializeJson(doc, payload, len);
    JsonVariant json_var = doc.as<JsonVariant>();

    PRINT_DBG("Used command_id = %d\n", json_var[0]["id"].as<unsigned int>());
    int output_number = json_var[0]["payload"]["number"].as<int>();
    int output_state = json_var[0]["payload"]["state"].as<int>();
    changeOutputState(output_number, output_state);

    kaa.sendCommandResultAllIds(command_type, json_var);
  }
  else {
    PRINT_DBG("Unknown command\n");
  }
  return 0;
}

void setupWifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.print(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  String ipstring = (
               String(WiFi.localIP()[0]) + "." +
               String(WiFi.localIP()[1]) + "." +
               String(WiFi.localIP()[2]) + "." +
               String(WiFi.localIP()[3])
             );
  Serial.println();
  PRINT_DBG("WiFi connected\n");
  PRINT_DBG("IP address: %s\n", ipstring.c_str());
}

void getTime() {
  Serial.print("Setting time using SNTP");
  configTime(3 * 3600, 0, "pool.ntp.org", "time.nist.gov");
  time_t now = time(nullptr);
  while (now < 8 * 3600 * 2) {
    delay(500);
    Serial.print(".");
    now = time(nullptr);
  }
  Serial.println("");
  struct tm timeinfo;
  gmtime_r(&now, &timeinfo);
  Serial.print("Current time: ");
  Serial.print(asctime(&timeinfo));
}

void setupCert() {
  if (!espClient.setCACert_P(caCert, caCertLen)) {
    Serial.println("Failed to load root CA certificate!");
    while(1);
  }
}

void callback(char* topic, byte* payload, unsigned int length) {
  PRINT_DBG("Message arrived [%s] ", topic);
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();
  kaa.messageArrivedCallback(topic, (char*)payload, length);
}

void reconnect() {
  PRINT_DBG("Attempting MQTT connection to %s:%u ... ", mqtt_host, mqtt_port);
  // Create client ID
  String clientId = "ESP8266Client-";
  clientId += String(ESP.getChipId());
  // Attempt to connect
  if (client.connect(clientId.c_str()))
  {
    if (espClient.verifyCertChain(mqtt_host)) {
      Serial.println("Server certificate verified");
    } else {
      Serial.println("ERROR: certificate verification failed!");
      return;
    }
    PRINT_DBG("connected\n");
    kaa.connect();
    composeAndSendMetadata();
  } else
  {
    PRINT_DBG("failed, rc=%d try again in %d milliseconds\n", client.state(), RECONNECT_TIME);
  }
}

void setup() {
  Serial.begin(115200);
  pinMode(LED_BUILTIN, OUTPUT);
  setupWifi();
  getTime();
  setupCert();
  client.setServer(mqtt_host, mqtt_port);
  client.setCallback(callback);
  kaa.setCommandCallback(&commandCallback);
}

void loop() {
  //Checking connection
  if (!client.connected())
  {
    now = millis();
    if ( ((now - last_reconnect) > RECONNECT_TIME) || (now < last_reconnect) )
    {
      last_reconnect = now;
      reconnect();
    }
    return;
  }
  client.loop();

  //Sending something
  now = millis();
  if ( ((now - last_msg) > SEND_TIME) || (now < last_msg) )
  {
    last_msg = now;
    //Send something here
    sendOutputsState();
  }
}
